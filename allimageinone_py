from base64 import encode
import numpy as np
import cv2 
import face_recognition
import os

# create new environment conda create -n env_dlib python=3.6
# activate enviroment conda activate env_dlib
# install dlib conda install -c conda-forge dlib

path ="allimage"
image =[]
classNames = []
myList = os.listdir(path)
# print(myList)

for cl in myList:
    curImg = cv2.imread(f"{path}/{cl}")
    image.append(curImg)
    classNames.append(os.path.splitext(cl)[0])
    
print(classNames)

def findEncodings(images):
    encodeList = []
    for img in images: 
        # img = face_recognition.load_image_file("allimage/elontrain.jfif")
        encode = face_recognition.face_encodings(img)[0]
        encodeList.append(encode)
        
    return encodeList

encodeListKnown = findEncodings(image)
print("Encoding Complete")

cap = cv2.VideoCapture(0)
while True:
    success , img =cap.read()
    imgS =cv2.resize(img,(0,0),None,0.25,0.25) 
    facesCurFrame= face_recognition.face_locations(imgS)
    encodeCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)
    
    for encodeFace, faceLoc in zip(encodeCurFrame,facesCurFrame):
        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
        faceDis =face_recognition.face_distance(encodeListKnown, encodeFace)
        print(faceDis)
        
        matchIndex =np.argmin(faceDis)
        
        if matches[matchIndex]:
            name =classNames[matchIndex].upper()
            print(name)
            
            y1, x2, y2, x1 = faceLoc
            y1, x2, y2, x1 = y1*4 , x2*4, y2*4, x1*4
            cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),2)
            cv2.rectangle(img,(x1,y2-35),(x2,y2),(0,255,0),cv2.FILLED)
            cv2.putText(img,name,(x1+6, y2-6),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2)
            

        
    cv2.imshow("webcam", img)
    cv2.waitKey(1)
        
            
        
# faceloct = face_recognition.face_locations(imgpaul)[0]
# encodepaul = face_recognition.face_encodings(imgpaul)[0]
# # print(faceloct)
# cv2.rectangle(imgpaul,(faceloct[3],faceloct[0]),(faceloct[1],faceloct[2]),(255,0,255),2)

# faceloctest = face_recognition.face_locations(imgpaultest)[0]
# encodepaultest = face_recognition.face_encodings(imgpaultest)[0]
# cv2.rectangle(imgpaultest,(faceloctest[3],faceloctest[0]),(faceloctest[1],faceloctest[2]),(255,0,255),2)

# myresult = face_recognition.compare_faces([encodepaul],encodepaultest)

# facedis = face_recognition.face_distance([encodepaul],encodepaultest)

# cv2.putText(imgpaultest, f"{myresult} {round(facedis[0],2)}",(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,0,255),2)

# print(myresult, facedis)